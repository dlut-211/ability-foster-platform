<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="edu.dlut.ssdut.abilityfosterplatform.mapper.ColumnStoreSegmentsMapper" >
  <resultMap id="BaseResultMap" type="edu.dlut.ssdut.abilityfosterplatform.model.ColumnStoreSegments" >
    <result column="partition_id" property="partitionId" jdbcType="BIGINT" />
    <result column="hobt_id" property="hobtId" jdbcType="BIGINT" />
    <result column="column_id" property="columnId" jdbcType="INTEGER" />
    <result column="segment_id" property="segmentId" jdbcType="INTEGER" />
    <result column="version" property="version" jdbcType="INTEGER" />
    <result column="encoding_type" property="encodingType" jdbcType="INTEGER" />
    <result column="row_count" property="rowCount" jdbcType="INTEGER" />
    <result column="has_nulls" property="hasNulls" jdbcType="BIT" />
    <result column="base_id" property="baseId" jdbcType="BIGINT" />
    <result column="magnitude" property="magnitude" jdbcType="DOUBLE" />
    <result column="primary_dictionary_id" property="primaryDictionaryId" jdbcType="INTEGER" />
    <result column="secondary_dictionary_id" property="secondaryDictionaryId" jdbcType="INTEGER" />
    <result column="min_data_id" property="minDataId" jdbcType="BIGINT" />
    <result column="max_data_id" property="maxDataId" jdbcType="BIGINT" />
    <result column="null_value" property="nullValue" jdbcType="BIGINT" />
    <result column="on_disk_size" property="onDiskSize" jdbcType="BIGINT" />
  </resultMap>
  <insert id="insert" parameterType="edu.dlut.ssdut.abilityfosterplatform.model.ColumnStoreSegments" >
    insert into column_store_segments (partition_id, hobt_id, column_id, 
      segment_id, version, encoding_type, 
      row_count, has_nulls, base_id, 
      magnitude, primary_dictionary_id, secondary_dictionary_id, 
      min_data_id, max_data_id, null_value, 
      on_disk_size)
    values (#{partitionId,jdbcType=BIGINT}, #{hobtId,jdbcType=BIGINT}, #{columnId,jdbcType=INTEGER}, 
      #{segmentId,jdbcType=INTEGER}, #{version,jdbcType=INTEGER}, #{encodingType,jdbcType=INTEGER}, 
      #{rowCount,jdbcType=INTEGER}, #{hasNulls,jdbcType=BIT}, #{baseId,jdbcType=BIGINT}, 
      #{magnitude,jdbcType=DOUBLE}, #{primaryDictionaryId,jdbcType=INTEGER}, #{secondaryDictionaryId,jdbcType=INTEGER}, 
      #{minDataId,jdbcType=BIGINT}, #{maxDataId,jdbcType=BIGINT}, #{nullValue,jdbcType=BIGINT}, 
      #{onDiskSize,jdbcType=BIGINT})
  </insert>
  <insert id="insertSelective" parameterType="edu.dlut.ssdut.abilityfosterplatform.model.ColumnStoreSegments" >
    insert into column_store_segments
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="partitionId != null" >
        partition_id,
      </if>
      <if test="hobtId != null" >
        hobt_id,
      </if>
      <if test="columnId != null" >
        column_id,
      </if>
      <if test="segmentId != null" >
        segment_id,
      </if>
      <if test="version != null" >
        version,
      </if>
      <if test="encodingType != null" >
        encoding_type,
      </if>
      <if test="rowCount != null" >
        row_count,
      </if>
      <if test="hasNulls != null" >
        has_nulls,
      </if>
      <if test="baseId != null" >
        base_id,
      </if>
      <if test="magnitude != null" >
        magnitude,
      </if>
      <if test="primaryDictionaryId != null" >
        primary_dictionary_id,
      </if>
      <if test="secondaryDictionaryId != null" >
        secondary_dictionary_id,
      </if>
      <if test="minDataId != null" >
        min_data_id,
      </if>
      <if test="maxDataId != null" >
        max_data_id,
      </if>
      <if test="nullValue != null" >
        null_value,
      </if>
      <if test="onDiskSize != null" >
        on_disk_size,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="partitionId != null" >
        #{partitionId,jdbcType=BIGINT},
      </if>
      <if test="hobtId != null" >
        #{hobtId,jdbcType=BIGINT},
      </if>
      <if test="columnId != null" >
        #{columnId,jdbcType=INTEGER},
      </if>
      <if test="segmentId != null" >
        #{segmentId,jdbcType=INTEGER},
      </if>
      <if test="version != null" >
        #{version,jdbcType=INTEGER},
      </if>
      <if test="encodingType != null" >
        #{encodingType,jdbcType=INTEGER},
      </if>
      <if test="rowCount != null" >
        #{rowCount,jdbcType=INTEGER},
      </if>
      <if test="hasNulls != null" >
        #{hasNulls,jdbcType=BIT},
      </if>
      <if test="baseId != null" >
        #{baseId,jdbcType=BIGINT},
      </if>
      <if test="magnitude != null" >
        #{magnitude,jdbcType=DOUBLE},
      </if>
      <if test="primaryDictionaryId != null" >
        #{primaryDictionaryId,jdbcType=INTEGER},
      </if>
      <if test="secondaryDictionaryId != null" >
        #{secondaryDictionaryId,jdbcType=INTEGER},
      </if>
      <if test="minDataId != null" >
        #{minDataId,jdbcType=BIGINT},
      </if>
      <if test="maxDataId != null" >
        #{maxDataId,jdbcType=BIGINT},
      </if>
      <if test="nullValue != null" >
        #{nullValue,jdbcType=BIGINT},
      </if>
      <if test="onDiskSize != null" >
        #{onDiskSize,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>
</mapper>